{"version":3,"sources":["client.es6","game.es6","index.es6"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["import _ from 'underscore';\n\n// jshint esversion: 6, node:true\nclass Game {\n  constructor () {\n    this._field = [];\n    this._round = 0;\n    this._rules = {\n    // time are in millisec\n      timebank: 100, // Maximum time in milliseconds that your bot can have in its time bank\n      time_per_move : 1000, // Time in milliseconds that is added to your bot's time bank each move\n      player_names : [], // A list of all player names in this match, including your bot's name\n      your_bot : '',// The name of your bot for this match\n      your_botid : 0, // The number used in a field update as your bot's chips\n      field_columns : 8, //  The number of columns of the playing field\n      field_rows : 7 //The number of rows of the playing field\n    };\n  }\n\n  toString () {\n    return {field: this._field, round: this._round, rules: this._rules};\n  }\n\n  // update options\n  rules (options) {\n    if (typeof options !== undefined) {\n      for( let key in options) {\n        this.rule(key, options[key]);\n      }\n    }\n    return this._rules;\n  }\n\n  // get/set specific rule info\n  rule (key, value) {\n    if (this._rules.hasOwnProperty(key)) {\n      if (typeof value !== undefined) {\n        switch (typeof this._rules[key]) {\n          case 'array':\n            this._rules[key] = value.split(',');\n          break;\n          case 'number':\n            this._rules[key] = parseInt(value, 10);\n            break;\n          case 'string':\n            this._rules[key] = value;\n          break;\n          default:\n            this._rules[key] = value;\n          break;\n        }\n      }\n      return this._rules[key];\n    }\n  }\n\n  round (rnd) {\n    if (typeof rnd !== undefined) {\n      this._round = rnd;\n    }\n    return this._round;\n  }\n\n  field (fld) {\n    if (typeof fld !== undefined) {\n      let rows = fld.split(';');\n      for (let i=rows.length-1; i>=0; i--) {\n        rows[i] = rows[i].split(',');\n      }\n      this._field = rows;\n    }\n    return this._field;\n  }\n\n  update (opt, val, rest) {\n    switch (val) {\n      case 'round':\n        this.round(rest[0]);\n        break;\n      case 'field':\n        this.field(rest[0]);\n        break;\n    }\n  }\n}\n\nclass Bot {\n  constructor(settings) {\n    this.game = new Game();\n    this.settings = {\n      debug: false\n    };\n    _.extendOwn(this.settings, settings);\n  }\n\n  run() {\n\n  }\n\n  readline(line) {\n    var [cmd, opt, val, ...rest] = line.split(' ');\n    switch(cmd){\n      case 'settings':\n        let option = {};\n        option[opt] = val;\n        this.game.rules(option);\n      break;\n      case 'action':\n\n      break;\n      case 'update':\n        this.game.update(opt, val, rest);\n      break;\n    }\n  }\n\n  terminate() {\n    if (this.settings.debug) {\n      console.info(\"Exiting bot\");\n      console.info(this.game.toString());\n    }\n  }\n}\n\nexport { Bot };","// jshint esversion: 6, node:true\nclass Game {\n  constructor () {\n    this._field = [];\n    this._round = 0;\n    this._rules = {\n    // time are in millisec\n      timebank: 100, // Maximum time in milliseconds that your bot can have in its time bank\n      time_per_move : 1000, // Time in milliseconds that is added to your bot's time bank each move\n      player_names : [], // A list of all player names in this match, including your bot's name\n      your_bot : '',// The name of your bot for this match\n      your_botid : 0, // The number used in a field update as your bot's chips\n      field_columns : 8, //  The number of columns of the playing field\n      field_rows : 7 //The number of rows of the playing field\n    };\n  }\n\n  toString () {\n    return {field: this._field, round: this._round, rules: this._rules};\n  }\n\n  // update options\n  rules (options) {\n    if (typeof options !== undefined) {\n      for( let key in options) {\n        this.rule(key, options[key]);\n      }\n    }\n    return this._rules;\n  }\n\n  // get/set specific rule info\n  rule (key, value) {\n    if (this._rules.hasOwnProperty(key)) {\n      if (typeof value !== undefined) {\n        switch (typeof this._rules[key]) {\n          case 'array':\n            this._rules[key] = value.split(',');\n          break;\n          case 'number':\n            this._rules[key] = parseInt(value, 10);\n            break;\n          case 'string':\n            this._rules[key] = value;\n          break;\n          default:\n            this._rules[key] = value;\n          break;\n        }\n      }\n      return this._rules[key];\n    }\n  }\n\n  round (rnd) {\n    if (typeof rnd !== undefined) {\n      this._round = rnd;\n    }\n    return this._round;\n  }\n\n  field (fld) {\n    if (typeof fld !== undefined) {\n      let rows = fld.split(';');\n      for (let i=rows.length-1; i>=0; i--) {\n        rows[i] = rows[i].split(',');\n      }\n      this._field = rows;\n    }\n    return this._field;\n  }\n\n  update (opt, val, rest) {\n    switch (val) {\n      case 'round':\n        this.round(rest[0]);\n        break;\n      case 'field':\n        this.field(rest[0]);\n        break;\n    }\n  }\n}\n\nexport { Game };","import readline from 'readline';\nimport _ from 'underscore';\n\n// jshint esversion: 6, node:true\nclass Game {\n  constructor () {\n    this._field = [];\n    this._round = 0;\n    this._rules = {\n    // time are in millisec\n      timebank: 100, // Maximum time in milliseconds that your bot can have in its time bank\n      time_per_move : 1000, // Time in milliseconds that is added to your bot's time bank each move\n      player_names : [], // A list of all player names in this match, including your bot's name\n      your_bot : '',// The name of your bot for this match\n      your_botid : 0, // The number used in a field update as your bot's chips\n      field_columns : 8, //  The number of columns of the playing field\n      field_rows : 7 //The number of rows of the playing field\n    };\n  }\n\n  toString () {\n    return {field: this._field, round: this._round, rules: this._rules};\n  }\n\n  // update options\n  rules (options) {\n    if (typeof options !== undefined) {\n      for( let key in options) {\n        this.rule(key, options[key]);\n      }\n    }\n    return this._rules;\n  }\n\n  // get/set specific rule info\n  rule (key, value) {\n    if (this._rules.hasOwnProperty(key)) {\n      if (typeof value !== undefined) {\n        switch (typeof this._rules[key]) {\n          case 'array':\n            this._rules[key] = value.split(',');\n          break;\n          case 'number':\n            this._rules[key] = parseInt(value, 10);\n            break;\n          case 'string':\n            this._rules[key] = value;\n          break;\n          default:\n            this._rules[key] = value;\n          break;\n        }\n      }\n      return this._rules[key];\n    }\n  }\n\n  round (rnd) {\n    if (typeof rnd !== undefined) {\n      this._round = rnd;\n    }\n    return this._round;\n  }\n\n  field (fld) {\n    if (typeof fld !== undefined) {\n      let rows = fld.split(';');\n      for (let i=rows.length-1; i>=0; i--) {\n        rows[i] = rows[i].split(',');\n      }\n      this._field = rows;\n    }\n    return this._field;\n  }\n\n  update (opt, val, rest) {\n    switch (val) {\n      case 'round':\n        this.round(rest[0]);\n        break;\n      case 'field':\n        this.field(rest[0]);\n        break;\n    }\n  }\n}\n\nclass Bot {\n  constructor(settings) {\n    this.game = new Game();\n    this.settings = {\n      debug: false\n    };\n    _.extendOwn(this.settings, settings);\n  }\n\n  run() {\n\n  }\n\n  readline(line) {\n    var [cmd, opt, val, ...rest] = line.split(' ');\n    switch(cmd){\n      case 'settings':\n        let option = {};\n        option[opt] = val;\n        this.game.rules(option);\n      break;\n      case 'action':\n\n      break;\n      case 'update':\n        this.game.update(opt, val, rest);\n      break;\n    }\n  }\n\n  terminate() {\n    if (this.settings.debug) {\n      console.info(\"Exiting bot\");\n      console.info(this.game.toString());\n    }\n  }\n}\n\nconst rl = readline.createInterface({\n  input: process.stdin\n});\n\nlet bot = new Bot({debug: true});\n\nrl.on('line', bot.readline.bind(bot));\nrl.on('close', bot.terminate.bind(bot));"],"sourceRoot":"/source/"}